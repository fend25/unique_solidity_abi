/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from "bn.js";
import type { ContractOptions } from "web3-eth-contract";
import type { EventLog } from "web3-core";
import type { EventEmitter } from "events";
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export interface ContractHelpers extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): ContractHelpers;
  clone(): ContractHelpers;
  methods: {
    allowed(
      contractAddress: string,
      user: string
    ): NonPayableTransactionObject<boolean>;

    allowlistEnabled(
      contractAddress: string
    ): NonPayableTransactionObject<boolean>;

    contractOwner(contractAddress: string): NonPayableTransactionObject<string>;

    getSponsoringRateLimit(
      contractAddress: string
    ): NonPayableTransactionObject<string>;

    setSponsoringMode(
      contractAddress: string,
      mode: number | string | BN
    ): NonPayableTransactionObject<void>;

    setSponsoringRateLimit(
      contractAddress: string,
      rateLimit: number | string | BN
    ): NonPayableTransactionObject<void>;

    sponsoringEnabled(
      contractAddress: string
    ): NonPayableTransactionObject<boolean>;

    sponsoringMode(
      contractAddress: string
    ): NonPayableTransactionObject<string>;

    supportsInterface(
      interfaceID: string | number[]
    ): NonPayableTransactionObject<boolean>;

    toggleAllowed(
      contractAddress: string,
      user: string,
      allowed: boolean
    ): NonPayableTransactionObject<void>;

    toggleAllowlist(
      contractAddress: string,
      enabled: boolean
    ): NonPayableTransactionObject<void>;

    toggleSponsoring(
      contractAddress: string,
      enabled: boolean
    ): NonPayableTransactionObject<void>;
  };
  events: {
    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };
}
