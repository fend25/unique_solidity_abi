/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from "bn.js";
import type { ContractOptions } from "web3-eth-contract";
import type { EventLog } from "web3-core";
import type { EventEmitter } from "events";
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type CollectionCreated = ContractEventLog<{
  owner: string;
  collectionId: string;
  0: string;
  1: string;
}>;

export interface CollectionHelpers extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): CollectionHelpers;
  clone(): CollectionHelpers;
  methods: {
    createNonfungibleCollection(
      name: string,
      description: string,
      tokenPrefix: string
    ): NonPayableTransactionObject<string>;

    isCollectionExist(
      collectionAddress: string
    ): NonPayableTransactionObject<boolean>;

    supportsInterface(
      interfaceID: string | number[]
    ): NonPayableTransactionObject<boolean>;
  };
  events: {
    CollectionCreated(cb?: Callback<CollectionCreated>): EventEmitter;
    CollectionCreated(
      options?: EventOptions,
      cb?: Callback<CollectionCreated>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "CollectionCreated", cb: Callback<CollectionCreated>): void;
  once(
    event: "CollectionCreated",
    options: EventOptions,
    cb: Callback<CollectionCreated>
  ): void;
}
